{"version":3,"sources":["../src/calculator.ts","../src/utils.ts"],"names":["Calculator","options","operands","sum","num","first","rest","diff","value","formatCurrency","amount","currency","validateEmail","email"],"mappings":";AAYO,IAAMA,CAAN,CAAA,KAAiB,CACH,OAAA,CAMjB,YAAYC,CAA6B,CAAA,EAAI,CAAA,CACzC,KAAK,OAAU,CAAA,CACX,SAAWA,CAAAA,CAAAA,CAAQ,WAAa,CAChC,CAAA,MAAA,CAAQA,CAAQ,CAAA,MAAA,EAAU,IAC9B,EACJ,CAQA,GAAA,CAAA,GAAOC,EAAuC,CAC1C,GAAIA,CAAS,CAAA,MAAA,GAAW,GAAK,IAAK,CAAA,OAAA,CAAQ,MACtC,CAAA,MAAM,IAAI,KAAM,CAAA,+BAA+B,CAKnD,CAAA,OAAO,CACH,KAAA,CAHU,IAAK,CAAA,gBAAA,CAAiBA,EAAS,MAAO,CAAA,CAACC,CAAKC,CAAAA,CAAAA,GAAQD,EAAMC,CAAK,CAAA,CAAC,CAAC,CAAA,CAI3E,UAAW,KACX,CAAA,QAAA,CAAU,MAAO,CAAA,MAAA,CAAO,CAAC,GAAGF,CAAQ,CAAC,CACzC,CACJ,CAQA,QAAA,CAASG,CAAkBC,CAAAA,GAAAA,CAAAA,CAAmC,CAG1D,OAAO,CACH,KAHU,CAAA,IAAA,CAAK,iBAAiBA,CAAK,CAAA,MAAA,CAAO,CAACC,CAAAA,CAAMH,CAAQG,GAAAA,CAAAA,CAAOH,CAAKC,CAAAA,CAAK,CAAC,CAI7E,CAAA,SAAA,CAAW,UACX,CAAA,QAAA,CAAU,OAAO,MAAO,CAAA,CAACA,CAAO,CAAA,GAAGC,CAAI,CAAC,CAC5C,CACJ,CAEQ,gBAAiBE,CAAAA,CAAAA,CAAuB,CAC5C,OAAO,KAAK,KAAMA,CAAAA,CAAAA,CAAQ,IAAK,CAAA,GAAA,CAAI,GAAI,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAC,EAAI,IAAK,CAAA,GAAA,CAAI,EAAI,CAAA,IAAA,CAAK,OAAQ,CAAA,SAAS,CACzG,CACJ,EC3DO,SAASC,CAAAA,CAAeC,CAAgBC,CAAAA,CAAAA,CAAW,MAAe,CACrE,OAAO,IAAI,IAAA,CAAK,aAAa,OAAS,CAAA,CAClC,KAAO,CAAA,UAAA,CACP,SAAAA,CACJ,CAAC,CAAE,CAAA,MAAA,CAAOD,CAAM,CACpB,CAOO,SAASE,CAAAA,CAAcC,EAAwB,CAElD,OADmB,4BACD,CAAA,IAAA,CAAKA,CAAK,CAChC","file":"index.js","sourcesContent":["import type { CalculationResult, CalculatorOptions } from \"./types\"\n\n/**\n * A simple calculator class demonstrating TypeScript library patterns\n *\n * @example\n * ```typescript\n * const calc = new Calculator({ precision: 2 })\n * const result = calc.add(1, 2)\n * console.log(result.value) // 3\n * ```\n */\nexport class Calculator {\n    private readonly options: Required<CalculatorOptions>\n\n    /**\n     * Creates a new Calculator instance\n     * @param options - Configuration options\n     */\n    constructor(options: CalculatorOptions = {}) {\n        this.options = {\n            precision: options.precision ?? 2,\n            strict: options.strict ?? true,\n        }\n    }\n\n    /**\n     * Adds two or more numbers\n     * @param operands - Numbers to add\n     * @returns Calculation result\n     * @throws Error when no operands provided and strict mode is enabled\n     */\n    add(...operands: number[]): CalculationResult {\n        if (operands.length === 0 && this.options.strict) {\n            throw new Error(\"At least one operand required\")\n        }\n\n        const value = this.roundToPrecision(operands.reduce((sum, num) => sum + num, 0))\n\n        return {\n            value,\n            operation: \"add\",\n            operands: Object.freeze([...operands]),\n        }\n    }\n\n    /**\n     * Subtracts numbers from the first operand\n     * @param first - Initial value\n     * @param rest - Numbers to subtract\n     * @returns Calculation result\n     */\n    subtract(first: number, ...rest: number[]): CalculationResult {\n        const value = this.roundToPrecision(rest.reduce((diff, num) => diff - num, first))\n\n        return {\n            value,\n            operation: \"subtract\",\n            operands: Object.freeze([first, ...rest]),\n        }\n    }\n\n    private roundToPrecision(value: number): number {\n        return Math.round(value * Math.pow(10, this.options.precision)) / Math.pow(10, this.options.precision)\n    }\n}\n","/**\n * Formats a number as currency\n * @param amount - The amount to format\n * @param currency - Currency code (default: 'USD')\n * @returns Formatted currency string\n */\nexport function formatCurrency(amount: number, currency = \"USD\"): string {\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency,\n    }).format(amount)\n}\n\n/**\n * Validates an email address using a simple regex\n * @param email - Email to validate\n * @returns True if email appears valid\n */\nexport function validateEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n}\n"]}